/*! For license information please see main.js.LICENSE.txt */
!function(e){var n={};function __webpack_require__(r){if(n[r])return n[r].exports;var t=n[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,__webpack_require__),t.l=!0,t.exports}__webpack_require__.m=e,__webpack_require__.c=n,__webpack_require__.d=function(e,n,r){__webpack_require__.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.t=function(e,n){if(1&n&&(e=__webpack_require__(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(__webpack_require__.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)__webpack_require__.d(r,t,function(n){return e[n]}.bind(null,t));return r},__webpack_require__.n=function(e){var n=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(n,"a",n),n},__webpack_require__.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="./src/index.js")}({"./src/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logic */ \"./src/logic.js\");\n\n\nconst cells = document.getElementsByClassName('cell');\nconst scores = document.getElementsByClassName('player-score');\nconst namesDisplay = document.querySelectorAll('.name');\nconst message = document.querySelector('.msg');\n\nconst print = (element) => {\n  const domElement = element;\n  element.addEventListener('click', () => {\n    // eslint-disable-next-line no-undef\n    const symbol = _logic__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeMove(element.id);\n    // eslint-enable-next-line no-undef\n    let msgPlayer = \"It's a TIE!\";\n    if (symbol) {\n      domElement.innerHTML = `<span class=\"${symbol[0]}\">${symbol[0]}</span>`;\n      if (symbol[1][0] === 'WIN') {\n        const score = symbol[1][2];\n        scores[symbol[1][1]].innerText = score;\n        document.querySelector('.play-again').classList.remove('hidden');\n        // eslint-disable-next-line no-undef\n        msgPlayer = `${_logic__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPlayers()[symbol[1][1]].getName()} is the winner of this round!`;\n        // eslint-enable-next-line no-undef\n      } else if (symbol[1] === 'TIE') {\n        document.querySelector('.play-again').classList.remove('hidden');\n      }\n      message.innerText = msgPlayer;\n    }\n  });\n};\n\n[...cells].forEach(print);\n\nconst cleanString = (element, string = '') => {\n  const domElement = element;\n  if (typeof string === 'number') {\n    domElement.innerText = '';\n  } else {\n    domElement.innerText = string;\n  }\n};\n\n// eslint-disable-next-line no-unused-vars\nconst resetGame = () => {\n  // eslint-disable-next-line no-undef\n  if (_logic__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetGame() === 'CLEAN BOARD') {\n  // eslint-enable-next-line no-undef\n    [...cells].forEach(cleanString);\n    cleanString(scores[0], '0');\n    cleanString(scores[1], '0');\n    cleanString(namesDisplay[0], '____');\n    cleanString(namesDisplay[1], '____');\n    document.querySelector('.start-game').classList.remove('hidden');\n    document.querySelector('.play-again').classList.add('hidden');\n  }\n};\n// eslint-enable-next-line no-unused-vars\n\n// eslint-disable-next-line no-unused-vars\nconst playAgain = () => {\n  // eslint-disable-next-line no-undef\n  const result = _logic__WEBPACK_IMPORTED_MODULE_0__[\"default\"].playAgain();\n  if (result === 'CLEAN BOARD') {\n    [...cells].forEach(cleanString);\n    document.querySelector('.play-again').classList.add('hidden');\n  }\n};\n// eslint-enable-next-line no-unused-vars\n\n// eslint-disable-next-line no-unused-vars\nconst startGame = () => {\n  const player1 = document.querySelector('[name=\"player1\"]');\n  const player2 = document.querySelector('[name=\"player2\"]');\n  if (player1.value.length > 0 && player2.value.length > 0) {\n    namesDisplay[0].innerText = player1.value;\n    namesDisplay[1].innerText = player2.value;\n    // eslint-disable-next-line no-undef\n    _logic__WEBPACK_IMPORTED_MODULE_0__[\"default\"].startGame(player1.value, player2.value);\n    // eslint-enable-next-line no-undef\n    document.querySelector('.start-game').classList.add('hidden');\n    player1.value = '';\n    player2.value = '';\n  }\n};\n// eslint-enable-next-line no-unused-vars\n\n\n//# sourceURL=webpack:///./src/index.js?")},"./src/logic.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\nconst PlayerFactory = (name, element) => {\n  let score = 0;\n  const symbol = element;\n  const getScore = () => score;\n  const getName = () => name;\n  const getSymbol = () => symbol;\n\n  function setScore() {\n    score += 1;\n  }\n\n  return {\n    getName,\n    getSymbol,\n    getScore,\n    setScore,\n  };\n};\n\nconst gameBoardModule = (() => {\n  let board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  const getBoard = () => board;\n  function resetBoard() {\n    board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  }\n  const makeMove = (index, symbol) => {\n    if (board[index] !== 0) {\n      return false;\n    }\n    const thisBoard = gameBoardModule.getBoard();\n    thisBoard[index] = symbol;\n    return thisBoard;\n  };\n  const checkWin = (symbol) => {\n    const boardString = board.join('');\n    const colRegexp = new RegExp(`${symbol}..${symbol}..${symbol}`);\n    const dia1Regexp = new RegExp(`${symbol}...${symbol}...${symbol}`);\n    const dia2Regexp = new RegExp(`..${symbol}.${symbol}.${symbol}..`);\n    const rowRegexp = [new RegExp(`${symbol}${symbol}${symbol}......`),\n      new RegExp(`...${symbol}${symbol}${symbol}...`),\n      new RegExp(`......${symbol}${symbol}${symbol}`)];\n    if (boardString.match(colRegexp)) {\n      return true;\n    } if (boardString.match(dia1Regexp) || boardString.match(dia2Regexp)) {\n      return true;\n    } if (\n      boardString.match(rowRegexp[0])\n      || boardString.match(rowRegexp[1])\n      || boardString.match(rowRegexp[2])) {\n      return true;\n    }\n    return false;\n  };\n  const checkTie = () => !board.some(n => n === 0);\n\n  return {\n    getBoard,\n    makeMove,\n    checkWin,\n    checkTie,\n    resetBoard,\n  };\n})();\n\n// eslint-disable-next-line no-unused-vars\nconst gameModule = (() => {\n  let turn = -1;\n  let currentPlayer = 0;\n  let players = [];\n  const board = gameBoardModule;\n  let continueGame = true;\n\n  const getTurn = () => turn;\n  function incrementTurn() {\n    turn += 1;\n  }\n  const getCurrentPlayer = () => currentPlayer;\n  const setCurrentPlayer = () => {\n    if (turn % 2 === 0) {\n      currentPlayer = 0;\n    } else {\n      currentPlayer = 1;\n    }\n  };\n  const getPlayers = () => players;\n  const setPlayers = (player1, player2) => {\n    players.push(player1, player2);\n  };\n  const getBoard = () => board;\n  const advanceGame = () => {\n    if (!continueGame) { return false; }\n    const symbol = players[currentPlayer].getSymbol();\n    const winner = board.checkWin(symbol);\n    if (!winner && !board.checkTie()) {\n      incrementTurn();\n      setCurrentPlayer();\n      return false;\n    }\n\n    continueGame = false;\n    if (winner) {\n      const playerIndex = turn % 2;\n      players[playerIndex].setScore();\n      return ['WIN', playerIndex, players[playerIndex].getScore()];\n    }\n    return 'TIE';\n  };\n  const startGame = (player1, player2) => {\n    if (turn === -1) {\n      setPlayers(PlayerFactory(player1, 'o'), PlayerFactory(player2, 'x'));\n      advanceGame();\n    }\n  };\n\n  const makeMove = (index) => {\n    if (turn > -1 && continueGame) {\n      const move = board.makeMove(index, players[currentPlayer].getSymbol());\n      if (!move) {\n        return false;\n      }\n      const symbol = players[currentPlayer].getSymbol();\n      const result = advanceGame();\n      return [symbol, result];\n    }\n    return false;\n  };\n\n  const playAgain = () => {\n    if (continueGame) {\n      return null;\n    }\n    turn = -1;\n    currentPlayer = 0;\n    board.resetBoard();\n    continueGame = true;\n    advanceGame();\n    return 'CLEAN BOARD';\n  };\n\n  const resetGame = () => {\n    players = [];\n    turn = -1;\n    currentPlayer = 0;\n    board.resetBoard();\n    continueGame = true;\n    return 'CLEAN BOARD';\n  };\n\n  return {\n    getTurn,\n    incrementTurn,\n    getCurrentPlayer,\n    setCurrentPlayer,\n    getPlayers,\n    setPlayers,\n    getBoard,\n    advanceGame,\n    startGame,\n    resetGame,\n    playAgain,\n    makeMove,\n  };\n})();\n// eslint-enable-next-line no-unused-vars\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (gameModule);\n\n//# sourceURL=webpack:///./src/logic.js?")}});